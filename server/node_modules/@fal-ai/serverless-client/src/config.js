"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getConfig = exports.config = exports.credentialsFromEnv = void 0;
const response_1 = require("./response");
/**
 * Checks if the required FAL environment variables are set.
 *
 * @returns `true` if the required environment variables are set,
 * `false` otherwise.
 */
function hasEnvVariables() {
    return (process &&
        process.env &&
        (typeof process.env.FAL_KEY !== 'undefined' ||
            (typeof process.env.FAL_KEY_ID !== 'undefined' &&
                typeof process.env.FAL_KEY_SECRET !== 'undefined')));
}
const credentialsFromEnv = () => {
    if (!hasEnvVariables()) {
        return undefined;
    }
    if (typeof process.env.FAL_KEY !== 'undefined') {
        return process.env.FAL_KEY;
    }
    return `${process.env.FAL_KEY_ID}:${process.env.FAL_KEY_SECRET}`;
};
exports.credentialsFromEnv = credentialsFromEnv;
/**
 * Get the default host for the fal-serverless gateway endpoint.
 * @private
 * @returns the default host. Depending on the platform it can default to
 * the environment variable `FAL_HOST`.
 */
function getDefaultHost() {
    const host = 'gateway.alpha.fal.ai';
    if (process && process.env) {
        return process.env.FAL_HOST || host;
    }
    return host;
}
const DEFAULT_CONFIG = {
    host: getDefaultHost(),
    credentials: exports.credentialsFromEnv,
    requestMiddleware: (request) => Promise.resolve(request),
    responseHandler: response_1.defaultResponseHandler,
};
let configuration;
/**
 * Configures the fal serverless client.
 *
 * @param config the new configuration.
 */
function config(config) {
    configuration = Object.assign(Object.assign({}, DEFAULT_CONFIG), config);
}
exports.config = config;
/**
 * Get the current fal serverless client configuration.
 *
 * @returns the current client configuration.
 */
function getConfig() {
    if (!configuration) {
        console.info('Using default configuration for the fal client');
        return Object.assign({}, DEFAULT_CONFIG);
    }
    return configuration;
}
exports.getConfig = getConfig;
//# sourceMappingURL=config.js.map